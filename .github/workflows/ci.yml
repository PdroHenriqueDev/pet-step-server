name: Deploy Pet Step Server Nodejs Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> .env
          echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> .env
          echo "MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }}" >> .env
          echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> .env
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
          echo "MONGO_DB_PATH=${{ secrets.MONGO_DB_PATH }}" >> .env
          echo "MONGO_EXPRESS_PORT=${{ secrets.MONGO_EXPRESS_PORT }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "JWT_SECRET_ACCESS_TOKEN=${{ secrets.JWT_SECRET_ACCESS_TOKEN }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> .env
          echo "STMP_HOST=${{ secrets.STMP_HOST }}" >> .env
          echo "STMP_PORT=${{ secrets.STMP_PORT }}" >> .env
          echo "STMP_USER=${{ secrets.STMP_USER }}" >> .env
          echo "STMP_PASSWORD=${{ secrets.STMP_PASSWORD }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "PET_STEP_FRONT=${{ secrets.PET_STEP_FRONT }}" >> .env
          echo "REAL_TIME_DATABSE=${{ secrets.REAL_TIME_DATABSE }}" >> .env

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/petstep-nodejs-app .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/petstep-nodejs-app:latest

  deploy:
    needs: build
    runs-on: petStepServerRunner

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/petstep-nodejs-app:latest

      - name: Create Docker Compose file
        run: |
          echo 'version: "3.8"' > docker-compose.yml
          echo 'services:' >> docker-compose.yml
          echo '  mongodb:' >> docker-compose.yml
          echo '    image: mongo:latest' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"' >> docker-compose.yml
          echo '      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"' >> docker-compose.yml
          echo '    ports:' >> docker-compose.yml
          echo '      - "${MONGO_PORT}:${MONGO_PORT}"' >> docker-compose.yml
          echo '  app:' >> docker-compose.yml
          echo '    image: ${{ secrets.DOCKER_USERNAME }}/petstep-nodejs-app:latest' >> docker-compose.yml
          echo '    ports:' >> docker-compose.yml
          echo '      - "3000:3000"' >> docker-compose.yml
          echo '    depends_on:' >> docker-compose.yml
          echo '      - mongodb' >> docker-compose.yml
          echo '    environment:' >> docker-compose.yml
          echo '      MONGO_HOST: mongodb' >> docker-compose.yml
          echo '      MONGO_PORT: "${MONGO_PORT}"' >> docker-compose.yml
          echo '      MONGO_DB_NAME: "${MONGO_DB_NAME}"' >> docker-compose.yml
          echo '      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"' >> docker-compose.yml
          echo '      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"' >> docker-compose.yml

      - name: Start containers with Docker Compose
        run: docker-compose up -d

      - name: Verify containers are running
        run: docker-compose ps
